// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250529085524_InitQuizSchema")]
    partial class InitQuizSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Domain.Entities.AnswerChoice", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerChoices");
                });

            modelBuilder.Entity("Domain.Entities.AnswerSelection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswerChoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubmittedAnswerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AnswerChoiceId");

                    b.HasIndex("SubmittedAnswerId");

                    b.ToTable("AnswerSelections");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hint")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizSubmission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalScore")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("QuizSubmissions");
                });

            modelBuilder.Entity("SubmittedAnswer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuizSubmissionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SelectedChoiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizSubmissionId");

                    b.HasIndex("SelectedChoiceId");

                    b.ToTable("SubmittedAnswers");
                });

            modelBuilder.Entity("Domain.Entities.AnswerChoice", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.AnswerSelection", b =>
                {
                    b.HasOne("Domain.Entities.AnswerChoice", "AnswerChoice")
                        .WithMany()
                        .HasForeignKey("AnswerChoiceId");

                    b.HasOne("SubmittedAnswer", "SubmittedAnswer")
                        .WithMany("SelectedChoices")
                        .HasForeignKey("SubmittedAnswerId");

                    b.Navigation("AnswerChoice");

                    b.Navigation("SubmittedAnswer");
                });

            modelBuilder.Entity("SubmittedAnswer", b =>
                {
                    b.HasOne("Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("QuizSubmission", "QuizSubmission")
                        .WithMany("SubmittedAnswers")
                        .HasForeignKey("QuizSubmissionId");

                    b.HasOne("Domain.Entities.AnswerChoice", "SelectedChoice")
                        .WithMany()
                        .HasForeignKey("SelectedChoiceId");

                    b.Navigation("Question");

                    b.Navigation("QuizSubmission");

                    b.Navigation("SelectedChoice");
                });

            modelBuilder.Entity("Domain.Entities.Question", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("QuizSubmission", b =>
                {
                    b.Navigation("SubmittedAnswers");
                });

            modelBuilder.Entity("SubmittedAnswer", b =>
                {
                    b.Navigation("SelectedChoices");
                });
#pragma warning restore 612, 618
        }
    }
}
